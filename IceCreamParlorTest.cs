using Microsoft.VisualStudio.TestTools.UnitTesting;
using HackerRank;
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace HackerRank.Tests
{
    [TestClass()]
    public class IceCreamParlorTest
    {
        [TestMethod()]
        public void TestMethodExample()
        {
            string expectedResult = "1 4";

            int money = 4;
            int[] cost = new int[] { 1, 4, 5, 3, 2 };

            string actualResult = IceCreamParlor.whatFlavorsCalculate(cost, money);

            Assert.AreEqual(expectedResult, actualResult);
        }

        [TestMethod()]
        public void TestMethod0()
        {
            string expectedResult = "1 2";

            int money = 4;
            int[] cost = new int[] { 2, 2, 4, 3 };

            string actualResult = IceCreamParlor.whatFlavorsCalculate(cost, money);

            Assert.AreEqual(expectedResult, actualResult);
        }

        [TestMethod()]
        public void TestMethod1()
        {
            string expectedResult = "2 3";

            int money = 5;
            int[] cost = new int[] { 1, 2, 3, 5, 6 };

            string actualResult = IceCreamParlor.whatFlavorsCalculate(cost, money);

            Assert.AreEqual(expectedResult, actualResult);
        }
        [TestMethod()]
        public void TestMethod2()
        {
            string expectedResult = "2 4";

            int money = 8;
            int[] cost = new int[] { 4, 3, 2, 5, 7 };

            string actualResult = IceCreamParlor.whatFlavorsCalculate(cost, money);

            Assert.AreEqual(expectedResult, actualResult);
        }
        [TestMethod()]
        public void TestMethod3()
        {
            string expectedResult = "1 3";

            int money = 12;
            int[] cost = new int[] { 7, 2, 5, 4, 11 };

            string actualResult = IceCreamParlor.whatFlavorsCalculate(cost, money);

            Assert.AreEqual(expectedResult, actualResult);
        }

        [TestMethod()]
        public void TestMethod4()
        {
            string expectedResult = "44 657";

            int money = 455070494;

            int[] cost = Array.ConvertAllplit(' '), costTemp => Convert.ToInt32(costTemp));
            string actualResult = IceCreamParlor.whatFlavorsCalculate(cost, money);

            Assert.AreEqual(expectedResult, actualResult);
        }


        [TestMethod()]
        public void TestMethodTC13()
        {
            var input = System.IO.File.ReadAllText(@"C:\Temp\input13.txt").Split('\n');
            var output = System.IO.File.ReadAllText(@"C:\Temp\output13.txt").Split('\n');

            int t = Convert.ToInt32(input[0]);
            int resultCount = 0;
            for (int i = 1; i < t; i += 3)
            {
                int money = Convert.ToInt32(input[i]);
                string inputString = input[i + 2];

                int[] cost = Array.ConvertAll(inputString.Split(' ', StringSplitOptions.RemoveEmptyEntries), costTemp => Convert.ToInt32(costTemp));
                string actualResult = IceCreamParlor.whatFlavorsCalculate(cost, money);
                Assert.AreEqual(output[resultCount].Trim(), actualResult);
                resultCount++;
            }

        }
    }
}